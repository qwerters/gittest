Workspace/working tree：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
#HEAD 指向的版本就是当前版本
origin/master 远程分支指针（与master类型类似）
FETCH_HEAD： 是一个版本链接，记录在本地的一个文件中，指向着目前已经从远程仓库取下来的分支的末端版本。（git fetch命令相关）
#配置：
git的配置文件分为三个级别，分别是：
system：负责本机全部用户, PATH=$INSTALL_PATH/etc/gitconfig
global：本用户下所有仓库， PATH=~/.gitconfig
local：仅仅负责当前仓库，PATH=$REPO/.git/config
可以通过git config --[system|global|local] 命令，交互式修改配置文件，默认为local（配置冲突以小范围的为准）
git config --global user.name "xiaolan"
git config --global user.email  "2717110178@qq.com"
git config -l  /--[system|global|local] --list（显示当前配置）
git init 
git clone 连接

#更新
git add ./git add -A #添加所有文件到暂存区(包括删除文件和包含文件的文件夹)
git status 	#查看文件状态：Untracked:未跟踪、
		#Unmodify:文件已经入库，未修改、
		#Modified:文件已修改，仅仅是修改，并没有进行其他的操作、
		#Staged：暂存状态
git commit -m "描述" #提交暂存区内容到版本库,
·		#-a 在 commit 的时候使用git add更新暂存区文件（仅对修改和删除文件有效）（无文件改变则无法提交）
git reflog #查看历史命令(用于查看id撤销版本回退)
git log #查看记录
git rm 文件名： 同时从工作区和暂存区中删除文件(在commit后版本中删除文件)。
git rm --cached 文件名： 从暂存区中删除文件(在commit后版本中删除文件)，工作目录文件将被保留（变为Untracked状态）
#删除文件：
rm 文件（但提示:在Changes not staged for commit中(没有使用add添加文件)） && git add 文件 &&git commit -m
#比较
git diff 文件名 #比较暂存区和工作区文件
git diff HEAD -- <文件名> #比较工作区和版本库(git diff HEAD -- readme.txt)
git diff [省略:比较暂存区和工作区文件] [--cached:查看index file与commit的差别] [HEAD:查看working tree(工作区)和commit的差别] 文件名(省略:所有文件) 
git diff 037e f844#两个指定提交记录的差异
#回退版本
注意：git restore和git reset在恢复工作区时，如果路径被跟踪，但恢复源中不存在，则将删除该路径以匹配恢复源，不会删除未跟踪的文件。
git checkout -- <file> 让这个文件回到最近一次git commit或git add时的状态 == git restore <file1>
git reset --hard HEAD /HEAD^ / HEAD^^ / HEAD~3 /部分版本号 #版本库->暂存区->工作区
git reset --soft HEAD /HEAD^ / HEAD^^ / HEAD~3 /部分版本号 #命令只会重置当前分支的指针，不会改变暂存区和工作区（working directory）。
git reset --mixed(默认)HEAD /HEAD^ / HEAD^^ / HEAD~3 /部分版本号 #命令只会重置暂存区（index）和当前分支的指针，不会改变工作区（working directory）。
git reset HEAD <file> 拉取最近一次提交到版本库的文件到暂存区==git restore --staged file

git revert HEAD ...#给定一个或多个现有提交，恢复相关补丁引入的更改，并记录一些记录它们的新提交。这需要你的工作树是干净的(文件已经提交过了)

#远程仓库(远程仓库:存放所有提交，用于与本地分支关联并同步（跟踪远程分支），通过远程仓库与其他仓库同步(所有仓库中git log一样，未push的分支其他仓库不显示，但显示提交记录))
(远程主机名:git remote add origin git@github.com:qwerters/gittest.git设置的名字)
git clone 连接 #克隆仓库（包括推送和分支）
ssh-keygen -t rsa -C "youremail@example.com" #密钥类型可以用 -t 选项指定,-C来指定密钥中的注释字段的注释
设置github  ssh key
git remote add origin（远程仓库名字,这是Git默认的叫法，也可以改成别的） git@github.com:qwerters/gittest.git
(使用git remote rm origin解除与远程仓库的绑定)（执行该命令后，本地仓库会与远程仓库建立关联，并将该连接命名为"origin"）
git push <远程主机名> <本地分支名>:<远程分支名> 或git push -u（=push一次+设置远程分支与本地分支关联） origin<远程主机名> master<分支名>(此时本地分支名与远程分支名相同) （远程仓库不存在分支时创建分支）
或 git push(推送当前分支（没有合并到当前分支的分支和提交和回退后原来的版本不会被push）,如果git push origin master命令创建的远程分支，则需要执行git push --set-upstream origin dev关联(提示branch 'dev' set up to track 'origin/dev'）当前本地分支与远端的master分支，如果git push -u origin master命令创建的则不需要)
(git push可能因文件冲突失败(没有和远程仓库同步就会失败)，需要先执行git pull更新本地分支（此时可能出现合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样，解决后，提交），然后再push)
推送分支到远程仓库（包括路径上的提交一并上传），在远端可能产生多个节点推送（完成数据同步）。
#推送远程不存在的master分支时，可以加-u参数(验证时输入yes)（和远端仓库合并，可能存在冲突）
git pull  [怎样合并：-r或--rebase,--no-rebase,设置参数pull.rebase] <远程主机名> <远程分支名>:<本地分支名> 即将远程主机的某个分支的更新取回，并与本地指定的分支合并
git pull <远程主机名> <远程分支名> 表示将远程分支拉取下来与本地当前分支合并
git pull origin<远程主机名>#当前分支与远程分支存在关联可以省略<远程分支名>
git pull （当前分支只有一个追踪分支，连远程主机名都可以省略）#将远程仓库中的更改合并到当前分支中（在本地分支可能产生多个节点推送）==git fetch + git merge origin/master或 git fetch + git rebase origin/master（根据配置的不同，没有配置会报错）
git checkout master&&git rebase dev:
             A---B---C dev
           /
        D---E---F---G master
                |
                |变化
               \/
            A---B---C dev
          /
        D----A----B----C---E'---F'---G' master
git rebase origin/master #将当前分支换基到origin/master指向的分支。具体为先将本分支的提交全部暂存，然后从origin/master指向的分支开始依次应用暂存的提交，若出现冲突会要求解决，解决后用git add暂存，
然后git rebase --continue继续，直到解决完所有冲突，换基操作完成。
git rebase origin/master dev #将dev分支的所有提交换基到origin/master指向的提交
git rebase master
git fetch <远程主机名> //这个命令将某个远程主机的更新全部取回本地
git fetch <远程主机名> <分支名> //只想取回特定分支的更新
git fetch <远程主机名> <远程分支名>:<本地分支名> #建立本地分支保存远程分支，然后执行git merge <本地分支名>合并

git remote #查看远程库，
（-v显示更详细的信息e.g.
origin  git@github.com:qwerters/gittest1.git (fetch)抓取origin的地址
origin  git@github.com:qwerters/gittest1.git (push)推送origin的地址）
git checkout -b dev origin/dev #创建远程origin的dev分支到本地(并建立远程分支的关联，并切换到dev分支)（clone远程仓库后需要根据远程分支创建本地分支使用该命令）== git branch --track [branch] [remote-branch]
git branch -vv#查看追踪关系
#分支管理
git branch dev #创建dev分支
git checkout dev ==git switch master#切换dev分支（切换分支工作区和暂存区也会切换,(未跟踪文件不受影响)未提交或未使用git stash保存修改时不能切换）
git branch --set-upstream-to=origin/master master#设置追踪关系==git push --set-upstream origin dev
（使用git stash后切换分支，再切换回来后需要执行git stash pop来恢复）
git checkout -b dev ==git switch -c dev#创建dev分支，然后切换到dev分支
git merge dev #合并dev分支到当前分支(只是合并内容,分支不变)，分三种情况：
1.Fast forward模式，快进：当前 master 分支所指向的提交是你当前提交（dev的提交）的直接上游，所以 Git 只是简单的将 master 指针向前移动。
#使用git merge --no-ff -m "描述信息" dev 强制禁用Fast forward模式，合并产生新的节点
2.非“快进”，修改不同文件。合并后 master 自动 commit 提交了一次，产生了新的提交包含两个分支内容
3.非“快进”，修改相同文件。合并失败，合并失败文件中被标记需要修改提交(不需要再执行合并了)（Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容）。
git stash [push]作用：保存工作区和暂存区，恢复工作区和暂存区和HEAD一样。切换分支前可使用git stash保存未提交的现场(https://www.cnblogs.com/qianqiannian/p/6011513.html)
git stash list查看保存的工作现场（工作区和暂存区）
git stash pop恢复并删除stash内容，（从存储列表中删除一个单独的存储状态，并将其应用到当前工作树状态的顶部（可能产生合并冲突））==git stash apply stash@{0}&& git stash drop stash@{0}
git stash clear #删除所有的暂存库
git cherry-pick 4c805e2 #把bug提交的修改4c805e2分支应用于当前分支到当前分支（产生一个新的提交），避免重复劳动。
# 查看本地分支
git branch | git branch -l
# 查看远程分支
git branch -r
# 查看所有分支
git branch -a
# 重命名当前分支为dev
git branch -m dev
# 重命名release分支为dev
git branch -m release dev

分离HEAD：
git实际上维护的是一串历史记录，每个历史标号都是一条记录的id，
而不同的分支表示不同的指针，指向某一个历史标号，沿着那个标号往前，可以查看所有的历史记录。
而HEAD也是一个指针，只是我们经常情况下将其和分支指针指向同一个历史记录(也可理解为HEAD指向分支)，而使用git checkout命令就是用来移动HEAD指针的。
使用git checkout id(HEAD^ ,id,HEAD~1，...)可以分离出 HEAD 并让其指向一个提交记录(没有分支名字的分支),即让其指向了某个具体的提交记录而不是分支名。
分离HEAD的使用场景：如果临时想基于某个commit做变更，试试新方案是否可行，就可以采用分离HEAD的方式。
然后使用checkout来切换分支或使用git branch dev3 fefdeac来给提交添加分支名字或git switch -c dev4建立分支

git branch -f master HEAD~3# 将 master 分支强制指向 HEAD 的第 3 级父提交（本电脑使用出错）
git branch -d dev #删除被合并过的dev分支（不会删除提交，需要通过id访问）
git branch -D <name>强行删除一个没有被合并过的分支（不会删除提交，需要通过id访问）
git log --graph #命令可以看到分支合并图 --oneline 显示在一行
git log origin/master可以看到远程分支
#创建标签
git tag v1.0 [HEAD/id] [-m "version 0.1 released"（说明）,git show <tagname>可以看到说明文字]#给HEAD（省略[HEAD/id] ）或指定提交打标签
git tag 查看标签
git tag -d v0.1#删除标签
git push origin master <tagname>#可以推送一个本地标签
git push [origin] [分支] --tags#推送所有标签到远程。
忽略特殊文件:建立文件.gitignore *.py !.gitignore（不能忽略已经在缓存区的文件）
git config --global alias.unstage 'reset HEAD' 设置reset HEAD命令别名为unstage或当前用户的Git配置文件.git/config
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
